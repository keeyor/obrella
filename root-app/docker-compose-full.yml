version: "3.8"
services:
  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,z
      - elasticsearch:/usr/share/elasticsearch/data:z
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - elk

  logstash:
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,z
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,z
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,z
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch

  mongo:
    image: mongo
    container_name: mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=miGa!1971
      - MONGO_INITDB_DATABASE=admin
    volumes:
      - mongodb-data:/data/db
      - ./docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - elk
    ports:
     - target: 27017
       published: 27018
       protocol: tcp
       mode: host
    restart: unless-stopped

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=miGa!1971
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=miGa!1971
    volumes:
      - mongodb-data:/data/db
    depends_on:
      - mongo
    networks:
      - elk
    ports:
      - "8081:8081"
    restart: unless-stopped

  dashboard:
    build:
      context: ../dashboard
      dockerfile: Dockerfile
    image: dashboard-image
    container_name: dashboard-image
    restart: on-failure
    volumes:
      - F:/delos-etc:/delos-etc
    depends_on:
      - mongo
      - logstash
    ports:
      - "8080:8080"
    networks:
      - elk

  vod:
    build:
      context: ../vod-app
      dockerfile: Dockerfile
    image: vod-image
    container_name: vod-image
    restart: on-failure
    volumes:
      - F:/delos-etc:/delos-etc
    depends_on:
      - mongo
      - logstash
    ports:
      - "8050:8050"
    networks:
      - elk

  live:
    build:
      context: ../live-app
      dockerfile: Dockerfile
    image: live-image
    container_name: live-image
    restart: on-failure
    volumes:
      - F:/delos-etc:/delos-etc
    depends_on:
      - mongo
      - logstash
    ports:
      - "8070:8070"
    networks:
      - elk

  events:
    build:
      context: ../events-app
      dockerfile: Dockerfile
    image: events-image
    container_name: events-image
    restart: on-failure
    volumes:
      - F:/delos-etc:/delos-etc
    depends_on:
      - mongo
      - logstash
    ports:
      - "8060:8060"
    networks:
      - elk

  root:
    build:
      context: ../root-app
      dockerfile: Dockerfile
    image: root-image
    container_name: root-image
    restart: on-failure
    ports:
      - "8085:8085"
    networks:
      - elk

volumes:
  mongodb-data:
  elasticsearch:
networks:
  elk:
    driver: bridge

